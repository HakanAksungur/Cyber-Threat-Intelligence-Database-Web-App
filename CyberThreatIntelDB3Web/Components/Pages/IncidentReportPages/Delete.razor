@page "/incidentreports/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>IncidentReport</h2>
    <hr />
    @if (incidentreport is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ReportDate</dt>
            <dd class="col-sm-10">@incidentreport.ReportDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ModifiedTime</dt>
            <dd class="col-sm-10">@incidentreport.ModifiedTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Details</dt>
            <dd class="col-sm-10">@incidentreport.Details</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HoneypotID</dt>
            <dd class="col-sm-10">@incidentreport.HoneypotID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AttackID</dt>
            <dd class="col-sm-10">@incidentreport.AttackID</dd>
        </dl>
        <EditForm method="post" Model="incidentreport" OnValidSubmit="DeleteIncidentReport" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(incidentreport is null)">Delete</button> |
            <a href="/incidentreports">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private IncidentReport? incidentreport;

    [SupplyParameterFromQuery]
    private int IncidentReportID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        incidentreport = await context.IncidentReport.FirstOrDefaultAsync(m => m.IncidentReportID == IncidentReportID);

        if (incidentreport is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteIncidentReport()
    {
        using var context = DbFactory.CreateDbContext();
        context.IncidentReport.Remove(incidentreport!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/incidentreports");
    }
}
