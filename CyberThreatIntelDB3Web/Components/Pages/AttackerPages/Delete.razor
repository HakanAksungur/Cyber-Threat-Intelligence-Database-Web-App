@page "/attackers/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
	<h2>Attacker</h2>
	<hr />
	@if (Attacker is null)
	{
		<p><em>Loading...</em></p>
	}
	else
	{
		<dl class="row">
			<dt class="col-sm-2">IPAddress</dt>
			<dd class="col-sm-10">@Attacker.IPAddress</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">FirstSeen</dt>
			<dd class="col-sm-10">@Attacker.FirstSeen</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">Country</dt>
			<dd class="col-sm-10">@Attacker.Country</dd>
		</dl>
		<dl class="row">
			<dt class="col-sm-2">LastActivity</dt>
			<dd class="col-sm-10">@Attacker.LastActivity</dd>
		</dl>
		<EditForm method="post" Model="Attacker" OnValidSubmit="DeleteAttacker" FormName="delete" Enhance>
			<button type="submit" class="btn btn-danger" disabled="@(Attacker is null)">Delete</button> |
			<a href="/attackers">Back to List</a>
		</EditForm>
	}
</div>

@code {
	private Attacker? Attacker;

	[SupplyParameterFromQuery]
	private int AttackerID { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();
		Attacker = await context.Attacker.FirstOrDefaultAsync(m => m.AttackerID == AttackerID);

		if (Attacker is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
	}

	private async Task DeleteAttacker()
	{
		using var context = DbFactory.CreateDbContext();
		List<Attack>? Attacks = await Scripts.ListConditionAsync<Attack>(context, (E => E.AttackerID == Attacker!.AttackerID));
		foreach (Attack Attack in Attacks)
		{
			List<IncidentReport>? IncidentReports = await Scripts.ListConditionAsync<IncidentReport>(context, (E => E.AttackID == Attack.AttackID));
			foreach (IncidentReport IncidentReport in IncidentReports)
			{
				context.IncidentReport.Remove(IncidentReport);
			}
			List<Malware>? Malwares = await Scripts.ListConditionAsync<Malware>(context, (E => E.AttackID == Attack.AttackID));
			foreach (Malware Malware in Malwares)
			{
				context.Malware.Remove(Malware);
			}

			context.Attack.Remove(Attack);
		}
		context.Attacker.Remove(Attacker!);
		await context.SaveChangesAsync();
		NavigationManager.NavigateTo("/attackers");
	}
}
