@page "/honeypots/create"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Honeypot</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Honeypot" OnValidSubmit="AddHoneypot" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="location" class="form-label">Location:</label> 
                <InputText id="location" @bind-Value="Honeypot.Location" class="form-control" /> 
                <ValidationMessage For="() => Honeypot.Location" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="iprange" class="form-label">IPRange:</label> 
                <InputText id="iprange" @bind-Value="Honeypot.IPRange" class="form-control" /> 
                <ValidationMessage For="() => Honeypot.IPRange" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="Honeypot.Status" class="form-control" /> 
                <ValidationMessage For="() => Honeypot.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="modifiedtime" class="form-label">ModifiedTime:</label> 
                <InputDate id="modifiedtime" @bind-Value="Honeypot.ModifiedTime" class="form-control" /> 
                <ValidationMessage For="() => Honeypot.ModifiedTime" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/honeypots">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Honeypot Honeypot { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddHoneypot()
    {
        using var context = DbFactory.CreateDbContext();
        context.Honeypot.Add(Honeypot);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/honeypots");
    }
}
