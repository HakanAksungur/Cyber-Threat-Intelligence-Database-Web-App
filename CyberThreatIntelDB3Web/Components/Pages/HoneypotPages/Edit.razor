@page "/honeypots/edit"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Honeypot</h2>
<hr />
@if (Honeypot is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Honeypot" OnValidSubmit="UpdateHoneypot" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Honeypot.HoneypotID" value="@Honeypot.HoneypotID" />
                <div class="mb-3">
                    <label for="location" class="form-label">Location:</label>
                    <InputText id="location" @bind-Value="Honeypot.Location" class="form-control" />
                    <ValidationMessage For="() => Honeypot.Location" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="iprange" class="form-label">IPRange:</label>
                    <InputText id="iprange" @bind-Value="Honeypot.IPRange" class="form-control" />
                    <ValidationMessage For="() => Honeypot.IPRange" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Honeypot.Status" class="form-control" />
                    <ValidationMessage For="() => Honeypot.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modifiedtime" class="form-label">ModifiedTime:</label>
                    <InputDate id="modifiedtime" @bind-Value="Honeypot.ModifiedTime" class="form-control" />
                    <ValidationMessage For="() => Honeypot.ModifiedTime" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/honeypots">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int HoneypotID { get; set; }

    [SupplyParameterFromForm]
    private Honeypot? Honeypot { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Honeypot ??= await context.Honeypot.FirstOrDefaultAsync(m => m.HoneypotID == HoneypotID);

        if (Honeypot is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateHoneypot()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Honeypot!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!HoneypotExists(Honeypot!.HoneypotID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/honeypots");
    }

    private bool HoneypotExists(int honeypotid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Honeypot.Any(e => e.HoneypotID == honeypotid);
    }
}
