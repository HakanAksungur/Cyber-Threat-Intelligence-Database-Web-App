@page "/honeypots/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Honeypot</h2>
    <hr />
    @if (honeypot is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Location</dt>
            <dd class="col-sm-10">@honeypot.Location</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IPRange</dt>
            <dd class="col-sm-10">@honeypot.IPRange</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@honeypot.Status</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ModifiedTime</dt>
            <dd class="col-sm-10">@honeypot.ModifiedTime</dd>
        </dl>
        <EditForm method="post" Model="honeypot" OnValidSubmit="DeleteHoneypot" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(honeypot is null)">Delete</button> |
            <a href="/honeypots">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Honeypot? honeypot;

    [SupplyParameterFromQuery]
    private int HoneypotID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        honeypot = await context.Honeypot.FirstOrDefaultAsync(m => m.HoneypotID == HoneypotID);

        if (honeypot is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteHoneypot()
    {
        using var context = DbFactory.CreateDbContext();
        List<Attack>? Attacks = await Scripts.ListConditionAsync<Attack>(context, (E => E.HoneypotID == honeypot!.HoneypotID));
        foreach (Attack Attack in Attacks)
        {
            List<IncidentReport>? IncidentReports = await Scripts.ListConditionAsync<IncidentReport>(context, (E => E.AttackID == Attack.AttackID));
            foreach (IncidentReport IncidentReport in IncidentReports)
            {
                context.IncidentReport.Remove(IncidentReport);
            }
            List<Malware>? Malwares = await Scripts.ListConditionAsync<Malware>(context, (E => E.AttackID == Attack.AttackID));
            foreach (Malware Malware in Malwares)
            {
                context.Malware.Remove(Malware);
            }

            context.Attack.Remove(Attack);
        }
        context.Honeypot.Remove(honeypot!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/honeypots");
    }
}
