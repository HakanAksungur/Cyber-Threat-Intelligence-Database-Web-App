@page "/malwares/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Malware</h2>
    <hr />
    @if (malware is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Signature</dt>
            <dd class="col-sm-10">@malware.Signature</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Type</dt>
            <dd class="col-sm-10">@malware.Type</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@malware.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AttackID</dt>
            <dd class="col-sm-10">@malware.AttackID</dd>
        </dl>
        <EditForm method="post" Model="malware" OnValidSubmit="DeleteMalware" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(malware is null)">Delete</button> |
            <a href="/malwares">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Malware? malware;

    [SupplyParameterFromQuery]
    private int MalwareID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        malware = await context.Malware.FirstOrDefaultAsync(m => m.MalwareID == MalwareID);

        if (malware is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMalware()
    {
        using var context = DbFactory.CreateDbContext();
        context.Malware.Remove(malware!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/malwares");
    }
}
