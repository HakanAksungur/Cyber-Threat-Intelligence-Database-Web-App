@page "/malwares/edit"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Malware</h2>
<hr />
@if (Malware == null | Attacks == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm method="post" Model="Malware" OnValidSubmit="UpdateMalware" FormName="edit" Enhance>
				<DataAnnotationsValidator />
				<ValidationSummary role="alert" />
				<input type="hidden" name="Malware.MalwareID" value="@Malware!.MalwareID" />
				<div class="mb-3">
					<label for="signature" class="form-label">Signature:</label>
					<InputText id="signature" @bind-Value="Malware.Signature" class="form-control" />
					<ValidationMessage For="() => Malware.Signature" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="type" class="form-label">Type:</label>
					<InputText id="type" @bind-Value="Malware.Type" class="form-control" />
					<ValidationMessage For="() => Malware.Type" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="name" class="form-label">Name:</label>
					<InputText id="name" @bind-Value="Malware.Name" class="form-control" />
					<ValidationMessage For="() => Malware.Name" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="attackid" class="form-label">Attack(ID / TYPE):</label>
					<InputSelect id="attackid" @bind-Value="Malware.AttackID" class="form-control">
						@foreach (var Attack in Attacks!)
						{
							<option value="@Attack.AttackID">@Attack.AttackID / @Attack.AttackType</option>
						}
					</InputSelect>
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
			</EditForm>
		</div>
	</div>
}

<div>
	<a href="/malwares">Back to List</a>
</div>

@code {
	[SupplyParameterFromQuery]
	private int MalwareID { get; set; }

	[SupplyParameterFromForm]
	private Malware? Malware { get; set; }

	private List<Attack>? Attacks;

	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();
		Malware ??= await context.Malware.FirstOrDefaultAsync(m => m.MalwareID == MalwareID);

		if (Malware is null)
		{
			NavigationManager.NavigateTo("notfound");
		}
		else
		{
			Attacks = await context.Attack.ToListAsync<Attack>();
		}
	}

	// To protect from overposting attacks, enable the specific properties you want to bind to.
	// For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task UpdateMalware()
	{
		using var context = DbFactory.CreateDbContext();
		context.Attach(Malware!).State = EntityState.Modified;

		try
		{
			await context.SaveChangesAsync();
		}
		catch (DbUpdateConcurrencyException)
		{
			if (!MalwareExists(Malware!.MalwareID))
			{
				NavigationManager.NavigateTo("notfound");
			}
			else
			{
				throw;
			}
		}

		NavigationManager.NavigateTo("/malwares");
	}

	private bool MalwareExists(int malwareid)
	{
		using var context = DbFactory.CreateDbContext();
		return context.Malware.Any(e => e.MalwareID == malwareid);
	}
}
