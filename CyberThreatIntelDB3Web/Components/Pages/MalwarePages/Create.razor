@page "/malwares/create"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>
@if (Attacks == null)
{
	<p>Loading...</p>
}
else
{
	<h1>Create</h1>

	<h2>Malware</h2>
	<hr />
	<div class="row">
		<div class="col-md-4">
			<EditForm method="post" Model="Malware" OnValidSubmit="AddMalware" FormName="create" Enhance>
				<DataAnnotationsValidator />
				<ValidationSummary class="text-danger" role="alert" />
				<div class="mb-3">
					<label for="signature" class="form-label">Signature:</label>
					<InputText id="signature" @bind-Value="Malware.Signature" class="form-control" />
					<ValidationMessage For="() => Malware.Signature" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="type" class="form-label">Type:</label>
					<InputText id="type" @bind-Value="Malware.Type" class="form-control" />
					<ValidationMessage For="() => Malware.Type" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="name" class="form-label">Name:</label>
					<InputText id="name" @bind-Value="Malware.Name" class="form-control" />
					<ValidationMessage For="() => Malware.Name" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="attackid" class="form-label">Attack(ID / TYPE):</label>
					<InputSelect id="attackid" @bind-Value="Malware.AttackID" class="form-control">
						@foreach (var Attack in Attacks!)
						{
							<option value="@Attack.AttackID">@Attack.AttackID / @Attack.AttackType</option>
						}
					</InputSelect>
				</div>
				<button type="submit" class="btn btn-primary">Create</button>
			</EditForm>
		</div>
	</div>

	<div>
		<a href="/malwares">Back to List</a>
	</div>
}
@code {
	[SupplyParameterFromForm]
	private Malware Malware { get; set; } = new();

	private List<Attack>? Attacks;


	protected override async Task OnInitializedAsync()
	{
		using var context = DbFactory.CreateDbContext();

		Attacks = await context.Attack.ToListAsync<Attack>();
	}

	// To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
	private async Task AddMalware()
	{
		using var context = DbFactory.CreateDbContext();
		context.Malware.Add(Malware);
		await context.SaveChangesAsync();
		NavigationManager.NavigateTo("/malwares");
	}
}
