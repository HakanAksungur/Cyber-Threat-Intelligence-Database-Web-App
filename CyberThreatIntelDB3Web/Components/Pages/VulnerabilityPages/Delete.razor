@page "/vulnerabilities/delete"
@using Microsoft.EntityFrameworkCore
@using DataAccess
@inject IDbContextFactory<CyberThreatIntelDB3Web.Data.CyberThreatIntelDB3WebContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Vulnerability</h2>
    <hr />
    @if (vulnerability is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">CVEIdentifier</dt>
            <dd class="col-sm-10">@vulnerability.CVEIdentifier</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@vulnerability.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SeverityLevel</dt>
            <dd class="col-sm-10">@vulnerability.SeverityLevel</dd>
        </dl>
        <EditForm method="post" Model="vulnerability" OnValidSubmit="DeleteVulnerability" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(vulnerability is null)">Delete</button> |
            <a href="/vulnerabilities">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Vulnerability? vulnerability;

    [SupplyParameterFromQuery]
    private int VulnerabilityID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vulnerability = await context.Vulnerability.FirstOrDefaultAsync(m => m.VulnerabilityID == VulnerabilityID);

        if (vulnerability is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteVulnerability()
    {
        using var context = DbFactory.CreateDbContext();
        List<Attack>? Attacks = await Scripts.ListConditionAsync<Attack>(context, (E => E.VulnerabilityID == vulnerability!.VulnerabilityID));
        foreach (Attack Attack in Attacks)
        {
            List<IncidentReport>? IncidentReports = await Scripts.ListConditionAsync<IncidentReport>(context, (E => E.AttackID == Attack.AttackID));
            foreach (IncidentReport IncidentReport in IncidentReports)
            {
                context.IncidentReport.Remove(IncidentReport);
            }
            List<Malware>? Malwares = await Scripts.ListConditionAsync<Malware>(context, (E => E.AttackID == Attack.AttackID));
            foreach (Malware Malware in Malwares)
            {
                context.Malware.Remove(Malware);
            }

            context.Attack.Remove(Attack);
        }
        context.Vulnerability.Remove(vulnerability!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/vulnerabilities");
    }
}
